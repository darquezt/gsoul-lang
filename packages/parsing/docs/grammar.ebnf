(***********)
(* Program *)
(***********)

program ::= statement* EOF;

(**************)
(* Statements *)
(**************)

statement     ::=
              | letDeclaration
              | print
              | block
              | exprStmt;
letDeclaration ::= "let" IDENTIFIER "=" expression ";";
print ::= "print" expression ";";
printEv ::= "printEv" expression ";";
exprStmt ::= expression ";";

(***************)
(* Expressions *)
(***************)

expression    ::=
              | "false"
              | "true"
              | "nil"
              | numberLiteral
              | variable
              | tuple
              | grouping
              | fold
              | unfold
              | block
              | fun
              | forall
              | call
              | scall
              | tupleProjection
              | ascription
              | binary
              | nonLinearBinary
              | ternary;

numberLiteral ::= NUMBER;
variable      ::= IDENTIFIER;
tuple         ::= "(" expression ("," expression)+ ")";
grouping      ::= "(" expression ")";
fold          ::= "fold" "<" recursiveType ">" "(" expression ")";
unfold        ::= "unfold" "(" expression ")";
block         ::= "{" statement* "}";
(*
       prefix operator
       at level 1
 *)
fun           ::=  "fn" "(" parameters ")" "=>" expression;
(*
       prefix operator
       at level 1
 *)
forall        ::=  "forall" IDENTIFIER* "." expression;
(*
       postfix operator
       at level 33
 *)
call          ::=  expression "(" expression ")";
(*
       postfix operator
       at level 33
 *)
scall         ::=  expression "@" "[" sensitivityArgs "]";
(*
       postfix operator
       at level 33
 *)
tupleProjection      ::=  expression "[" NUMBER "]";
(*
       postfix operator
       at level 31
 *)
ascription    ::=  expression "::" type;
(*
       infix operator
       at level 23
 *)
binary        ::=
              | expression "+" expression
              | expression "-" expression;
nonLinearBinary      ::=
                     | multiplication
                     | comparison
                     | equality;
(*
       infix operator
       at level 25
 *)
multiplication       ::= expression "*" expression;
(*
       infix operator
       at level 19
 *)
comparison    ::=
              | expression ">" expression
              | expression ">=" expression
              | expression "<" expression
              | expression "<=" expression;
(*
       infix operator
       at level 17
 *)
equality      ::= expression "==" expression;
(*
       infix operator
       at level 15
       right-associative
 *)
ternary       ::= expression "?" expression ":" expression;

(*********)
(* Types *)
(*********)

type   ::=
       | "Number"
       | "Nil"
       | recursiveVariable
       | tupleType
       | typeGrouping
       | recursiveType
       | typeAndEffect
       | arrowType;

recursiveVariable    ::= IDENTIFIER;
tupleType     ::= "(" type ("," type)+ ")";
typeGrouping  ::= "(" type ")";
(*
       prefix operator
       at level 7
*)
recursiveType ::= "rec" IDENTIFIER "." type;
(*
       postfix operator
       at level 19
*)
typeAndEffect ::= type "!" "[" senv "]";
(*
       infix operator
       at level 9
       right-associative
*)
arrowType     ::= type "->" type;

senv ::= ( sensitivity IDENTIFIER ("+" sensitivity IDENTIFIER)* )?;
sensitivity ::= NUMBER | "?";

(* Utility *)

arguments ::= expression; (* This should be extended in the future for multiple args *)
parameters ::= IDENTIFIER ":" type; (* This should be extended in the future for multiple params *)

(* Lexical *)

NUMBER ::= DIGIT+ ( "." DIGIT+ )?;
STRING ::= "\"" <anything> "\"";
IDENTIFIER ::= ALPHA ( ALPHA | DIGIT )*;
ALPHA ::= /[a-zA-Z]/ | "_";
DIGIT ::= /[0-9]/;
