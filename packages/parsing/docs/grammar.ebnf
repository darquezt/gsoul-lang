(* Program *)

program ::= declaration* EOF;

(* Declarations *)

declaration ::= resDecl | varDecl | statement;
varDecl ::= "let" IDENTIFIER "=" expression ";";
resDecl ::= "slet" IDENTIFIER "=" expression ";";

(* Statements *)

statement ::= exprStmt
            | print
            | block;
exprStmt ::= expression ";";
print ::= "print" expression ";";
printEv ::= "printEv" expression ";";
block ::= "{" declaration* "}";

(* Expressions *)

expression ::= ascription;
ascription ::= equality ("::" typeEff)* | equality ("::" type)* | equality ("::" senv)*;
(* Logic ops and assignments can be added here *)
equality ::= comparison; (* Equality and inequality should be added here *)
comparison ::= additive ("<=" additive)*;
additive ::= factor ("+" factor)*; (* Minus op should be added here *)
multiplicative ::= unary ("*" unary)*; (* Division should be added here *)
unary ::= call; (* Unary operators may be added before `call` in the future *)
call ::= primary ("(" arguments ")")* | primary senv*;

primary ::= "true" | "false"
          | "nil"
          | "fun" "(" parameters ")" block
          | "forall" IDENTIFIER "." expression
          | "tuple" "(" expression, expression ")"
          | "untup" IDENTIFIER, IDENTIFIER "=" expression "in" expression
          | NUMBER
          | IDENTIFIER
          | "(" expression ")";

(* Types *)

typeEff ::= type "!" senv; (* Should the @[] be in the def of senv? *)
type ::= "Number" | "Bool" | "Nil"
       | typeEff  "->"  typeEff | "forall" IDENTIFIER "." typeEff;


typeEff ::= "Number" | "Bool" | "Nil" | typeEff "->" typeEff | typeEff "!" senv;
baseTypeEff ::= baseType "!" senv;
type ::= baseType | typeEff "->" typeEff;
baseType = ;

senv ::= "[" ( sensitivity IDENTIFIER ("+" sensitivity IDENTIFIER)* )? "]";
sensitivity ::= NUMBER | "?";

(* Utility *)

arguments ::= expression; (* This should be extended in the future for multiple args *)
parameters ::= IDENTIFIER ":" type; (* This should be extended in the future for multiple params *)

(* Lexical *)

NUMBER ::= DIGIT+ ( "." DIGIT+ )?;
STRING ::= "\"" <anything> "\"";
IDENTIFIER ::= ALPHA ( ALPHA | DIGIT )*;
ALPHA ::= /[a-zA-Z]/ | "_";
DIGIT ::= /[0-9]/;
